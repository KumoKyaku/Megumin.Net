<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kcp</name>
    </assembly>
    <members>
        <member name="T:System.Net.Sockets.Kcp.FakeKcpIO">
            <summary>
            用于调试的KCP IO 类，没有Kcp功能
            </summary>
        </member>
        <member name="T:System.Net.Sockets.Kcp.IKcpCallback">
            <summary>
            Kcp回调
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpCallback.Output(System.Buffers.IMemoryOwner{System.Byte},System.Int32)">
            <summary>
            kcp 发送方向输出
            </summary>
            <param name="buffer">kcp 交出发送缓冲区控制权，缓冲区来自<see cref="!:RentBuffer(int)"/></param>
            <param name="avalidLength">数据的有效长度</param>
            <returns>不需要返回值</returns>
            <remarks>通过增加 avalidLength 能够在协议栈中有效的减少数据拷贝</remarks>
        </member>
        <member name="T:System.Net.Sockets.Kcp.IKcpOutputer">
            <summary>
            Kcp回调
            </summary>
        </member>
        <member name="T:System.Net.Sockets.Kcp.IRentable">
            <summary>
            外部提供缓冲区,可以在外部链接一个内存池
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IRentable.RentBuffer(System.Int32)">
            <summary>
            外部提供缓冲区,可以在外部链接一个内存池
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpSetting.NoDelay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            fastest: ikcp_nodelay(kcp, 1, 20, 2, 1)
            </summary>
            <param name="nodelay">0:disable(default), 1:enable</param>
            <param name="interval">internal update timer interval in millisec, default is 100ms</param>
            <param name="resend">0:disable fast resend(default), 1:enable fast resend</param>
            <param name="nc">0:normal congestion control(default), 1:disable congestion control</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpSetting.SetMtu(System.Int32)">
            <summary>
            change MTU size, default is 1400
            <para>** 这个方法不是线程安全的。请在没有发送和接收时调用 。</para>
            </summary>
            <param name="mtu"></param>
            <returns></returns>
            <remarks>
            如果没有必要，不要修改Mtu。过小的Mtu会导致分片数大于接收窗口，造成kcp阻塞冻结。
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpSetting.WndSize(System.Int32,System.Int32)">
            <summary>
            set maximum window size: sndwnd=32, rcvwnd=128 by default
            </summary>
            <param name="sndwnd"></param>
            <param name="rcvwnd"></param>
            <returns></returns>
            <remarks>
            如果没有必要请不要修改。注意确保接收窗口必须大于最大分片数。
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpSendable.Send(System.ReadOnlySpan{System.Byte},System.Object)">
            <summary>
            将要发送到网络的数据Send到kcp协议中
            </summary>
            <param name="span"></param>
            <param name="options"></param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpSendable.Send(System.Buffers.ReadOnlySequence{System.Byte},System.Object)">
            <summary>
            将要发送到网络的数据Send到kcp协议中
            </summary>
            <param name="span"></param>
            <param name="options"></param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpInputable.Input(System.ReadOnlySpan{System.Byte})">
            <summary>
            下层收到数据后添加到kcp协议中
            </summary>
            <param name="span"></param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpInputable.Input(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            下层收到数据后添加到kcp协议中
            </summary>
            <param name="span"></param>
        </member>
        <member name="T:System.Net.Sockets.Kcp.IKcpIO">
            <summary>
            kcp协议输入输出标准接口
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpIO.Recv(System.Buffers.IBufferWriter{System.Byte},System.Object)">
            <summary>
            从kcp中取出一个整合完毕的数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpIO.Output(System.Buffers.IBufferWriter{System.Byte},System.Object)">
            <summary>
            从kcp协议中取出需要发送到网络的数据。
            </summary>
            <param name="writer"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:System.Net.Sockets.Kcp.IKcpHeader">
            <summary>
            Kcp报头
            https://zhuanlan.zhihu.com/p/559191428
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.conv">
            <summary>
            会话编号，两方一致才会通信
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.cmd">
            <summary>
            指令类型
            </summary>
            <remarks>
            <para/> IKCP_CMD_PUSH = 81                 // cmd: push data 数据报文
            <para/> IKCP_CMD_ACK  = 82                 // cmd: ack 确认报文
            <para/> IKCP_CMD_WASK = 83                 // cmd: window probe (ask) 窗口探测报文,询问对端剩余接收窗口的大小.
            <para/> IKCP_CMD_WINS = 84                 // cmd: window size (tell) 窗口通知报文,通知对端剩余接收窗口的大小.
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.frg">
            <summary>
            剩余分片数量，表示随后还有多少个报文属于同一个包。
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.wnd">
            <summary>
            自己可用窗口大小    
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.ts">
            <summary>
            发送时的时间戳 <seealso cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds"/>
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.sn">
            <summary>
            编号 确认编号或者报文编号
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.una">
            <summary>
            代表编号前面的所有报都收到了的标志
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpHeader.len">
            <summary>
            数据内容长度
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpSegment.resendts">
            <summary>
            重传的时间戳。超过当前时间重发这个包
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpSegment.rto">
            <summary>
            超时重传时间，根据网络去定
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpSegment.fastack">
            <summary>
            快速重传机制，记录被跳过的次数，超过次数进行快速重传
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpSegment.xmit">
            <summary>
            重传次数
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.IKcpSegment.data">
            <summary>
            数据内容
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.IKcpSegment.Encode(System.Span{System.Byte})">
            <summary>
            将IKcpSegment编码成字节数组，并返回总长度（包括Kcp报头）
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.#ctor(System.UInt32,System.Net.Sockets.Kcp.IKcpCallback,System.Net.Sockets.Kcp.IRentable)">
            <summary>
            create a new kcp control object, 'conv' must equal in two endpoint
            from the same connection.
            </summary>
            <param name="conv_"></param>
            <param name="callback"></param>
            <param name="rentable">可租用内存的回调</param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.CreateBuffer(System.Int32)">
            <summary>
            如果外部能够提供缓冲区则使用外部缓冲区，否则new byte[]
            </summary>
            <param name="needSize"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.TryRecv">
            <summary>
            TryRecv Recv设计上同一时刻只允许一个线程调用。
            <para/>因为要保证数据顺序，多个线程同时调用Recv也没有意义。
            <para/>所以只需要部分加锁即可。
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.TryRecv(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            TryRecv Recv设计上同一时刻只允许一个线程调用。
            <para/>因为要保证数据顺序，多个线程同时调用Recv也没有意义。
            <para/>所以只需要部分加锁即可。
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.Recv(System.Span{System.Byte})">
            <summary>
            user/upper level recv: returns size, returns below zero for EAGAIN
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.Recv(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            user/upper level recv: returns size, returns below zero for EAGAIN
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.UncheckRecv(System.Span{System.Byte})">
            <summary>
            这个函数不检查任何参数
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.UncheckRecv(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            这个函数不检查任何参数
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.Kcp`1.PeekSize">
            <summary>
            check the size of next message in the recv queue
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Net.Sockets.Kcp.KcpCore`1">
            <summary>
            https://luyuhuang.tech/2020/12/09/kcp.html
            https://github.com/skywind3000/kcp/wiki/Network-Layer
            <para>外部buffer ----拆分拷贝----等待列表 -----移动----发送列表----拷贝----发送buffer---output</para>
            https://github.com/skywind3000/kcp/issues/118#issuecomment-338133930
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_CMD_PUSH">
            <summary>
            数据报文
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_CMD_ACK">
            <summary>
            确认报文
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_CMD_WASK">
            <summary>
            窗口探测报文,询问对端剩余接收窗口的大小.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_CMD_WINS">
            <summary>
            窗口通知报文,通知对端剩余接收窗口的大小.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_ASK_SEND">
            <summary>
            IKCP_ASK_SEND表示请求远端告知窗口大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_ASK_TELL">
            <summary>
            IKCP_ASK_TELL表示告知远端窗口大小。
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_WND_RCV">
            <summary>
            接收窗口默认值。必须大于最大分片数
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_MTU_DEF">
            <summary>
            默认最大传输单元 常见路由值 1492 1480  默认1400保证在路由层不会被分片
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IKCP_PROBE_INIT">
            <summary>
            窗口探查CD
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpCore`1.conv">
            <summary>
            频道号
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.mtu">
            <summary>
            最大传输单元（Maximum Transmission Unit，MTU）
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpCore`1.BufferNeedSize">
            <summary>
            缓冲区最小大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.mss">
            <summary>
            最大报文段长度
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.state">
            <summary>
            连接状态（0xFFFFFFFF表示断开连接）
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.snd_una">
            <summary>
            第一个未确认的包
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.snd_nxt">
            <summary>
            待发送包的序号
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rcv_nxt">
            <summary>
            下一个等待接收消息ID,待接收消息序号
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.ssthresh">
            <summary>
            拥塞窗口阈值
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rx_rttval">
            <summary>
            ack接收rtt浮动值
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rx_srtt">
            <summary>
            ack接收rtt静态值
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rx_rto">
            <summary>
            由ack接收延迟计算出来的复原时间。Retransmission TimeOut(RTO), 超时重传时间.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rx_minrto">
            <summary>
            最小复原时间
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.snd_wnd">
            <summary>
            发送窗口大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rcv_wnd">
            <summary>
            接收窗口大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rmt_wnd">
            <summary>
            远端接收窗口大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.cwnd">
            <summary>
            拥塞窗口大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.probe">
            <summary>
            探查变量，IKCP_ASK_TELL表示告知远端窗口大小。IKCP_ASK_SEND表示请求远端告知窗口大小
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.interval">
            <summary>
            内部flush刷新间隔
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.ts_flush">
            <summary>
            下次flush刷新时间戳
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.nodelay">
            <summary>
            是否启动无延迟模式
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.updated">
            <summary>
            是否调用过update函数的标识
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.ts_probe">
            <summary>
            下次探查窗口的时间戳
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.probe_wait">
            <summary>
            探查窗口需要等待的时间
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.dead_link">
            <summary>
            最大重传次数
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.incr">
            <summary>
            可发送的最大数据量
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.fastresend">
            <summary>
            触发快速重传的重复ack个数
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.nocwnd">
            <summary>
            取消拥塞控制
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.stream">
            <summary>
            是否采用流传输模式
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.IsLittleEndian">
            <summary>
            <para>https://github.com/skywind3000/kcp/issues/53</para>
            按照 C版 设计，使用小端字节序
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.acklist">
            <summary>
            发送 ack 队列 
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.snd_queue">
            <summary>
            发送等待队列
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.snd_buf">
            <summary>
            正在发送列表
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rcv_queue">
            <summary>
            正在等待触发接收回调函数消息列表
            <para>需要执行的操作  添加 遍历 删除</para>
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.rcv_buf">
            <summary>
            正在等待重组消息列表
            <para>需要执行的操作  添加 插入 遍历 删除</para>
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpCore`1.WaitSnd">
            <summary>
            get how many packet is waiting to be sent
            </summary>
            <returns></returns>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpCore`1.m_disposing">
            <summary>
            是否正在释放
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Dispose">
            <summary>
            释放不是严格线程安全的，尽量使用和Update相同的线程调用，
            或者等待析构时自动释放。
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Check(System.DateTimeOffset@)">
            <summary>
            Determine when should you invoke ikcp_update:
            returns when you should invoke ikcp_update in millisec, if there
            is no ikcp_input/_send calling. you can call ikcp_update in that
            time, instead of call update repeatly.
            <para></para>
            Important to reduce unnacessary ikcp_update invoking. use it to
            schedule ikcp_update (eg. implementing an epoll-like mechanism,
            or optimize ikcp_update when handling massive kcp connections)
            <para></para>
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Move_Rcv_buf_2_Rcv_queue">
            <summary>
            move available data from rcv_buf -> rcv_queue
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Update_ack(System.Int32)">
            <summary>
            update ack.
            </summary>
            <param name="rtt"></param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Parse_data(`0)">
            <summary>
            处理下层网络收到的数据包
            </summary>
            <param name="newseg"></param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Flush">
            <summary>
            flush pending data
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Update(System.DateTime@)">
            <summary>
            update state (call it repeatedly, every 10ms-100ms), or you can ask
            ikcp_check when to call it again (without ikcp_input/_send calling).
            </summary>
            <param name="time">DateTime.UtcNow</param>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Interval(System.Int32)">
            <summary>
            
            </summary>
            <param name="interval_"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Send(System.ReadOnlySpan{System.Byte},System.Object)">
            <summary>
            user/upper level send, returns below zero for error
            </summary>
            <param name="span"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Input(System.ReadOnlySpan{System.Byte})">
            <summary>
            when you received a low level packet (eg. UDP packet), call it
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpCore`1.Input(System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            <inheritdoc cref="M:System.Net.Sockets.Kcp.KcpCore`1.Input(System.ReadOnlySpan{System.Byte})"/>
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="T:System.Net.Sockets.Kcp.QueuePipe`1">
            <summary>
            <inheritdoc cref="!:IPipe&lt;T&gt;"/>
            <para></para>这是个简单的实现,更复杂使用微软官方实现<see cref="!:System.Threading.Channels.Channel.CreateBounded&lt;T&gt;(int)"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.Net.Sockets.Kcp.KcpSegment">
            <summary>
            调整了没存布局，直接拷贝块提升性能。
            <para>结构体保存内容只有一个指针，不用担心参数传递过程中的性能</para>
            https://github.com/skywind3000/kcp/issues/118#issuecomment-338133930
            <para>不要对没有初始化的KcpSegment(内部指针为0，所有属性都将指向位置区域) 进行任何赋值操作，可能导致内存损坏。
            出于性能考虑，没有对此项进行安全检查。</para>
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpSegment.AllocHGlobal(System.Int32)">
            <summary>
            使用完必须显示释放，否则内存泄漏
            </summary>
            <param name="appendDateSize"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpSegment.FreeHGlobal(System.Net.Sockets.Kcp.KcpSegment)">
            <summary>
            释放非托管内存
            </summary>
            <param name="seg"></param>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.resendts">
            以下为本机使用的参数
            <summary>
            offset = 0
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.rto">
            <summary>
            offset = 4
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.fastack">
            <summary>
            offset = 8
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.xmit">
            <summary>
            offset = 12
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset">
            以下为需要网络传输的参数
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.conv">
            <summary>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/>
            </summary>
            https://github.com/skywind3000/kcp/issues/134
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.cmd">
            <summary>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 4
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.frg">
            <summary>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 5
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.wnd">
            <summary>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 6
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.ts">
            <summary>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 8
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.sn">
            <summary>
            <para> SendNumber? </para>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 12
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.una">
            <summary>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 16
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.len">
            <summary>
            <para> AppendDateSize </para>
            offset = <see cref="F:System.Net.Sockets.Kcp.KcpSegment.LocalOffset"/> + 20
            </summary>
        </member>
        <member name="P:System.Net.Sockets.Kcp.KcpSegment.data">
            <summary>
            
            </summary>
            https://github.com/skywind3000/kcp/issues/35#issuecomment-263770736
        </member>
        <member name="M:System.Net.Sockets.Kcp.KcpSegment.Encode(System.Span{System.Byte})">
            <summary>
            将片段中的要发送的数据拷贝到指定缓冲区
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:System.Net.Sockets.Kcp.SimpleSegManager">
            <summary>
            动态申请非托管内存
            </summary>
        </member>
        <member name="T:System.Net.Sockets.Kcp.UnSafeSegManager">
            <summary>
            申请固定大小非托管内存。使用这个就不能SetMtu了，大小已经写死。
            </summary>
            <remarks>需要大量测试</remarks>
        </member>
        <member name="F:System.Net.Sockets.Kcp.UnSafeSegManager.blockSize">
            <summary>
            因为默认mtu是1400，并且内存需要内存行/内存页对齐。这里直接512对齐。
            </summary>
        </member>
        <member name="T:System.Net.Sockets.Kcp.PoolSegManager">
            <summary>
            使用内存池，而不是非托管内存，有内存alloc，但是不多。可以解决Marshal.AllocHGlobal 内核调用带来的性能问题
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.PoolSegManager.blockSize">
            <summary>
            因为默认mtu是1400，并且内存需要内存行/内存页对齐。这里直接512对齐。
            </summary>
        </member>
        <member name="F:System.Net.Sockets.Kcp.PoolSegManager.Seg.LocalOffset">
            以下为需要网络传输的参数
        </member>
        <member name="T:System.Net.Sockets.Kcp.Simple.SimpleKcpClient">
            <summary>
            简单例子
            </summary>
        </member>
    </members>
</doc>
