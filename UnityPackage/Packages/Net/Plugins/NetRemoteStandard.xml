<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetRemoteStandard</name>
    </assembly>
    <members>
        <member name="T:Net.Remote.IRemoteID">
            <summary>
            实例ID
            </summary>
        </member>
        <member name="P:Net.Remote.IRemoteID.ID">
            <summary>
            Remote唯一。
            </summary>
        </member>
        <member name="T:Net.Remote.IRemoteEndPoint">
            <summary>
            末端地址
            </summary>
        </member>
        <member name="P:Net.Remote.IRemoteEndPoint.ConnectIPEndPoint">
            <summary>
            连接的目标地址
            </summary>
        </member>
        <member name="P:Net.Remote.IRemoteEndPoint.RemappedEndPoint">
            <summary>
            连接后重映射的地址,Udp,Kcp可能会使用这个设计。
            <para>如果没有重映射, 返回<see cref="P:System.Net.Sockets.Socket.RemoteEndPoint"/> </para>
            </summary>
        </member>
        <member name="T:Net.Remote.IConnectable">
            <summary>
            可连接的
            </summary>
        </member>
        <member name="M:Net.Remote.IConnectable.ConnectAsync(System.Net.IPEndPoint,System.Int32)">
            <summary>
            尝试连接。可以重写具体实现并将Auth过程合并在一起。
            </summary>
            <param name="endPoint"></param>
            <param name="retryCount">重试次数，失败会返回最后一次的异常</param>
            <returns></returns>
        </member>
        <member name="M:Net.Remote.IDisconnectable.Disconnect(System.Boolean,System.Boolean)">
            <summary>
            主动断开连接
            </summary>
            <param name="triggerOnDisConnect">是否触发OnDisConnect</param>
            <param name="waitSendQueue">是否等待发送队列发送完成，如果等待会，具体实现应该触发异步，不应该阻塞</param>
        </member>
        <member name="T:Net.Remote.ISendable">
            <summary>
            发送任意对象，只要它能被MessageLUT解析。
            </summary>
        </member>
        <member name="M:Net.Remote.ISendable.Send(System.Object,System.Object)">
            <summary>
            发送消息，无阻塞立刻返回
            <para>调用方 无法了解发送情况</para>
            序列化过程同步执行，方法返回表示序列化已结束，修改message内容不影响发送数据。
            </summary>
            <param name="message"></param>
            <param name="options">参数项，在整个发送管线中传递</param>
            <remarks>序列化开销不大，放在调用线程执行比使用单独的序列化线程更好</remarks>
        </member>
        <member name="T:Net.Remote.ISendCanAwaitable">
            <summary>
            可以发送一个消息并期待一个指定类型的返回值
            </summary>
            <remarks>为了通用性和框架兼容性，object导致值类型装箱是可以妥协的。</remarks>
        </member>
        <member name="M:Net.Remote.ISendCanAwaitable.Send``1(System.Object,System.Object)">
            <summary>
            异步发送消息，封装Rpc过程。
            </summary>
            <typeparam name="RpcResult">期待的Rpc结果类型，如果收到返回类型，但是类型不匹配，返回null</typeparam>
            <param name="message">发送消息的类型需要序列化 具体实现使用查找表 MessageLUT 中指定ID和序列化函数</param>
            <param name="options">参数项，在整个发送管线中传递</param>
            <returns>需要检测空值</returns>
        </member>
        <member name="M:Net.Remote.ISendCanAwaitable.SendSafeAwait``1(System.Object,System.Action{System.Exception},System.Object)">
            <summary>
            异步发送消息，封装Rpc过程
            结果值是保证有值的，如果结果值为空或其他异常,触发异常回调函数，不会抛出异常，所以不用try catch。
            异步方法的后续部分不会触发，所以后续部分可以省去空检查。
            <para>****千万注意，只有在RpcResult有返回值的情况下，后续异步方法才会执行。
            这不是语言特性，也不是语法特性。这由具体实现的类库保证。*****</para>
            </summary>
            <typeparam name="RpcResult"></typeparam>
            <param name="message"></param>
            <param name="onException">发生异常时的回调函数</param>
            <param name="options">参数项，在整个发送管线中传递</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Net.Remote.ReceiveCallback">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="receiver"></param>
             <returns></returns>
             <remarks> 在接口中不要放事件</remarks>
        </member>
        <member name="T:Net.Remote.IReceiveMessage">
            <summary>
            接收消息
            </summary>
            <remarks>不要定义OnReceive函数，由于具体业务逻辑不同，这个函数的签名可能有很多中变化，不能标准化。</remarks>
        </member>
        <member name="P:Net.Remote.IReceiveMessage.LastReceiveTimeFloat">
            <summary>
            最后一次收到消息的时间戳,因为Unity中时间戳是float
            </summary>
        </member>
        <member name="T:Net.Remote.IRemote">
            <summary>
            应用网络层API封装
            <para>不需要实现<see cref="T:System.IDisposable"/>,实现起来繁琐，工程中没有太太价值。</para>
            <para>不应该继承IConnectable，不关心连接过程， 在语义上是Session级别的接口。
            对于接收端，收到时就是已连接的，所以IConnectable是次要的。</para>
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:Net.Remote.IRemote.Client">
            <summary>
            实际连接的Socket
            </summary>
        </member>
        <member name="P:Net.Remote.IRemote.IsVaild">
            <summary>
            当前是否正常工作
            </summary>
        </member>
        <member name="T:Net.Remote.IMultiplexing">
            <summary>
            监听端多路复用，用于Udp,即一个socket 对应多个远端。
            </summary>
        </member>
        <member name="P:Net.Remote.IMultiplexing.MultiplexingCount">
            <summary>
            负数和0 是非法值，最小值为1 。当为1时每个连接对应一个socket，等于Tcp效果。默认为1。
            <para>开启多路复用并不一定提高效率，要以实际测试为准</para>
            设定值需要根据网络传输速度和消息处理速度决定，没有通用标准。
            </summary>
        </member>
        <member name="T:Net.Remote.IRpcTimeoutOption">
            <summary>
            Rpc回调池参数，具体由实现库支持
            </summary>
        </member>
        <member name="P:Net.Remote.IRpcTimeoutOption.MillisecondsDelay">
            <summary>
            指定毫秒后超时，-1表示永不超时。
            </summary>
        </member>
        <member name="P:Net.Remote.ICmdOption.Cmd">
            <summary>
            <![CDATA[
            1 << 0 :Echo,       
            1 << 15 :Test
            ]]>
            </summary>
            <remarks>
            没有固定标准，具体参考PreReceive函数中实现。
            </remarks>
        </member>
        <member name="T:Net.Remote.IRpcThreadOption">
            <summary>
            由SendOption针对消息实例设置RpcSend异步后续的执行，是否使用MessageThreadTransducer
            </summary>
        </member>
        <member name="P:Net.Remote.IRpcThreadOption.RpcComplatePost2ThreadScheduler">
            <summary>
            <para/> true: 强制使用ThreadScheduler;
            <para/> false: 强制不使用ThreadScheduler;
            <para/> null表示不控制，由其他设置决定;
            </summary>
        </member>
        <member name="T:Net.Remote.IReconnetCallback">
            <summary>
            todo 只有主动链接测 不停的发送心跳,自动断线重连,回调用于UI
            </summary>
        </member>
        <member name="M:Net.Remote.IReconnetCallback.OnBenginReconnect">
            <summary>
            开始断线重连
            </summary>
        </member>
        <member name="M:Net.Remote.IReconnetCallback.OnEndReconnect(System.Int32,System.Net.Sockets.SocketException)">
            <summary>
            结束断线重连
            </summary>
            <param name="result"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Net.Remote.IReconnetCallback.ReTryTimes">
            <summary>
            重试次数
            </summary>
        </member>
    </members>
</doc>
